{"version":3,"sources":["App.js","logo.svg","serviceWorker.js","index.js"],"names":["App","state","display","numA","numB","inputHandler","input","newNum","disNum","setState","clearHandler","operatorHandler","equalHandler","eval","className","id","this","onClick","React","Component","module","exports","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6zCAKMA,I,spBACJC,MAAQ,CACNC,QAAS,GACTC,KAAK,GACLC,KAAK,I,MAGTC,aAAa,SAACC,GACZ,IAAMC,EAAO,MAAKN,MAAMG,KAAKE,EACvBE,EAAS,MAAKP,MAAMC,QAAQI,EAClC,MAAKG,SAAS,CAACL,KAAKG,EAAOL,QAAQM,K,MAGrCE,aAAa,WACX,MAAKD,SAAS,CAACN,KAAK,GAAGC,KAAK,GAAGF,QAAQ,M,MAGzCS,gBAAgB,SAACL,GACf,IAAMC,EAAO,MAAKN,MAAMG,KAAKE,EAC7B,MAAKG,SAAS,CAACL,KAAKG,EAAQL,QAAQ,M,MAGtCU,aAAa,WACX,IAAML,OAAOM,KAAK,MAAKZ,MAAMG,MAC7B,MAAKK,SAAS,CAACL,KAAKG,OAAQL,QAAQK,U,sTAG1B,IAAD,OACP,OACE,kEAAKO,UAAU,cACb,kEAAKC,GAAG,WACLC,KAAKf,MAAMC,SAEd,kEAAKa,GAAG,aACN,qEAAQD,UAAU,QAAQG,QAAS,kBAAM,EAAKZ,aAAa,OAA3D,KACA,qEAAQS,UAAU,QAAQG,QAAS,kBAAM,EAAKZ,aAAa,OAA3D,KACA,qEAAQS,UAAU,QAAQG,QAAS,kBAAM,EAAKZ,aAAa,OAA3D,KACA,qEAAQS,UAAU,MAAMG,QAAS,kBAAI,EAAKN,gBAAgB,OAA1D,QACA,qEAAQG,UAAU,QAAQG,QAAS,kBAAM,EAAKZ,aAAa,OAA3D,KACA,qEAAQS,UAAU,QAAQG,QAAS,kBAAM,EAAKZ,aAAa,OAA3D,KACA,qEAAQS,UAAU,QAAQG,QAAS,kBAAM,EAAKZ,aAAa,OAA3D,KACA,qEAAQS,UAAU,MAAMG,QAAS,kBAAI,EAAKN,gBAAgB,OAA1D,KACA,qEAAQG,UAAU,QAAQG,QAAS,kBAAM,EAAKZ,aAAa,OAA3D,KACA,qEAAQS,UAAU,QAAQG,QAAS,kBAAM,EAAKZ,aAAa,OAA3D,KACA,qEAAQS,UAAU,QAAQG,QAAS,kBAAM,EAAKZ,aAAa,OAA3D,KACA,qEAAQS,UAAU,MAAMG,QAAS,kBAAI,EAAKN,gBAAgB,OAA1D,KACA,qEAAQG,UAAU,QAAQG,QAASD,KAAKN,cAAxC,SACA,qEAAQI,UAAU,QAAQG,QAAS,kBAAM,EAAKZ,aAAa,OAA3D,KACA,qEAAQS,UAAU,MAAMG,QAAS,kBAAI,EAAKN,gBAAgB,OAA1D,KACA,qEAAQG,UAAU,MAAMG,QAASD,KAAKJ,cAAtC,W,KAjDQM,6CAAMC,WAwDTnB,2B,4EC7DfoB,EAAOC,QAAU,IAA0B,kC,yGCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC5B,EAAA,EAAD,MAAS6B,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.03d55be6.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends React.Component {\n  state = {\n    display: \"\",\n    numA:\"\",\n    numB:\"\",\n  };\n\ninputHandler=(input)=>{\n  const newNum=this.state.numB+input;\n  const disNum = this.state.display+input\n  this.setState({numB:newNum,display:disNum})\n}\n\nclearHandler=()=>{\n  this.setState({numA:\"\",numB:\"\",display:\"\"})\n}\n\noperatorHandler=(input)=>{\n  const newNum=this.state.numB+input;\n  this.setState({numB:newNum, display:\"\"})\n}\n\nequalHandler=()=>{\n  const newNum=eval(this.state.numB)\n  this.setState({numB:newNum, display:newNum})\n}\n\n  render() {\n    return (\n      <div className=\"calculator\">\n        <div id=\"display\">\n          {this.state.display}\n        </div>\n        <div id=\"calc-btns\">\n          <button className=\"white\" onClick={() => this.inputHandler(\"7\")}>7</button>\n          <button className=\"white\" onClick={() => this.inputHandler(\"8\")}>8</button>\n          <button className=\"white\" onClick={() => this.inputHandler(\"9\")}>9</button>\n          <button className=\"red\" onClick={()=>this.operatorHandler(\"/\")}>รท</button>\n          <button className=\"white\" onClick={() => this.inputHandler(\"4\")}>4</button>\n          <button className=\"white\" onClick={() => this.inputHandler(\"5\")}>5</button>\n          <button className=\"white\" onClick={() => this.inputHandler(\"6\")}>6</button>\n          <button className=\"red\" onClick={()=>this.operatorHandler(\"*\")}>x</button>\n          <button className=\"white\" onClick={() => this.inputHandler(\"1\")}>1</button>\n          <button className=\"white\" onClick={() => this.inputHandler(\"2\")}>2</button>\n          <button className=\"white\" onClick={() => this.inputHandler(\"3\")}>3</button>\n          <button className=\"red\" onClick={()=>this.operatorHandler(\"-\")}>-</button>\n          <button className=\"white\" onClick={this.clearHandler}>clear</button>\n          <button className=\"white\" onClick={() => this.inputHandler(\"0\")}>0</button>\n          <button className=\"red\" onClick={()=>this.operatorHandler(\"+\")}>+</button>\n          <button className=\"red\" onClick={this.equalHandler}>=</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}